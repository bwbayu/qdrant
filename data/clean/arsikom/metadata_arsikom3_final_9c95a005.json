[
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_0",
    "page_number": 1,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_0.jpg",
    "text": "IK200\nARSITEKTUR DAN ORGANISASI KOMPUTER\nYudi Ahmad Hambali, M.T.\nyudi.a.hambali@upi.edu\nLogo: emblem bundar berwarna merah (bagian atas) dan hitam (bagian bawah) dengan simbol menyerupai pena di tengah atas dan pola lengkung putih di bagian bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_1",
    "page_number": 2,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_1.jpg",
    "text": "System Interconnection dan Sistem Bus\nArskom\nDeskripsi gambar: Logo bundar di sudut kiri bawah: bagian atas merah, simbol buku putih dengan titik kuning di tengah, bagian bawah hitam dengan garis lengkung putih."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_2",
    "page_number": 3,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_2.jpg",
    "text": "Program Concept\n• Hardwired systems are inflexible\n• General purpose hardware can do different tasks, given correct control signals\n• Instead of re-wiring, supply a new set of control signals\nFooter: Arskom\nDeskripsi gambar: Slide presentasi berlatar putih berjudul \"Program Concept\" di kiri atas. Terdapat tiga butir poin (bullet) berisi teks seperti tercantum di atas. Di bagian bawah tengah terdapat teks kecil \"Arskom\", di kiri bawah ada logo bundar, dan di kanan bawah ada nomor slide \"3\"."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_3",
    "page_number": 4,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_3.jpg",
    "text": "What is a program?\nA sequence of steps\nFor each step, an arithmetic or logical operation is done\nFor each operation, a different set of control signals is needed\nFooter: Arskom\nSlide number: 4\nDeskripsi gambar: Slide presentasi dengan latar putih. Judul di kiri atas: \"What is a program?\". Di bawah judul terdapat tiga baris teks: \"A sequence of steps\"; \"For each step, an arithmetic or logical operation is done\"; \"For each operation, a different set of control signals is needed\". Di bagian bawah tengah tertulis \"Arskom\" sebagai footer. Ada logo bulat kecil di pojok kiri bawah dan nomor slide \"4\" di pojok kanan bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_4",
    "page_number": 5,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_4.jpg",
    "text": "Function of Control Unit\nFor each operation a unique code is provided\ne.g. ADD, MOVE\nA hardware segment accepts the code and issues the control signals\nWe have a COMPUTER!\nFooter: Arskom\nSlide number: 5\nDeskripsi gambar: Slide berjudul \"Function of Control Unit\" dengan logo kecil di pojok kiri bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_5",
    "page_number": 6,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_5.jpg",
    "text": "Components\n• The Control Unit and the Arithmetic and Logic Unit constitute the Central Processing Unit\n• Data and instructions need to get into the system and results out\n  ○ Input/output\n• Temporary storage of code and results is needed\n  ○ Main memory\nFooter: Arskom (slide 6)\nDeskripsi gambar: Slide berjudul \"Components\" berisi tiga poin utama sebagai bullet: 1) \"The Control Unit and the Arithmetic and Logic Unit constitute the Central Processing Unit\"; 2) \"Data and instructions need to get into the system and results out\" dengan sub-bullet \"Input/output\"; 3) \"Temporary storage of code and results is needed\" dengan sub-bullet \"Main memory\". Tata letak: teks hitam di latar putih, judul di kiri atas, daftar bullet di tengah. Di bagian bawah kiri terdapat logo bundar berwarna merah, putih, dan hitam; di bagian bawah tengah tertulis \"Arskom\"; di pojok kanan bawah terdapat nomor slide \"6\"."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_6",
    "page_number": 7,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_6.jpg",
    "text": "Computer Components: Top Level View\nDiagram: CPU, Main Memory, dan I/O Module terhubung oleh System Bus.\nCPU (komponen di kotak):\n- PC\n- IR\n- MAR\n- MBR\n- I/O AR\n- I/O BR\n- Execution unit\nMain Memory:\n- Alamat 0 ... n-1\n- Area berisi \"Instruction\" (bagian atas)\n- Area berisi \"Data\" (bagian bawah)\nI/O Module:\n- Buffers\nLegenda (singkatan register):\n- PC  = Program counter (penunjuk alamat instruksi)\n- IR  = Instruction register (register instruksi)\n- MAR = Memory address register (register alamat memori)\n- MBR = Memory buffer register (register penyangga/penyimpan data memori)\n- I/O AR = Input/output address register (register alamat I/O)\n- I/O BR = Input/output buffer register (register penyangga I/O)\n(Gambar menunjukkan panah tebal System Bus yang menghubungkan CPU, Main Memory, dan I/O Module.)"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_7",
    "page_number": 8,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_7.jpg",
    "text": "Instruction Cycle (Siklus Instruksi)\n• Two steps:\n  ○ Fetch\n  ○ Execute\nDiagram (alur): START → Fetch Next Instruction → Execute Instruction → HALT\nLabel pada diagram: Fetch Cycle (di atas kotak 'Fetch Next Instruction'), Execute Cycle (di atas kotak 'Execute Instruction')\nDiagram menunjukkan loop dari 'Execute Instruction' kembali ke 'Fetch Next Instruction' sampai kondisi HALT.\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_8",
    "page_number": 9,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_8.jpg",
    "text": "Fetch Cycle\n- Program Counter (PC) holds address of next instruction to fetch\n- Processor fetches instruction from memory location pointed to by PC\n- Increment PC — Unless told otherwise\n- Instruksi dimuat ke Instruction Register (IR)\n- Prosesor menafsirkan (interprets) instruksi dan melakukan tindakan yang diperlukan"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_9",
    "page_number": 10,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_9.jpg",
    "text": "Execute Cycle\n• Processor-memory\n  ○ Data transfer between CPU and main memory\n• Processor I/O\n  ○ Data transfer between CPU and I/O module\n• Data processing\n  ○ Some arithmetic or logical operation on data\n• Control\n  ○ Alteration of sequence of operations (perubahan urutan operasi)\n  ○ e.g. jump\n• Combination of above\n(Footer: Arskom, slide 10)\nDeskripsi gambar: Slide berjudul \"Execute Cycle\" berisi poin-poin seperti tertera di atas; terdapat logo di pojok kiri bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_10",
    "page_number": 11,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_10.jpg",
    "text": "Example of Program Execution\nDiagram menunjukkan contoh eksekusi program dalam 6 langkah: fetch instruksi dari memori alamat 300, pembaruan register PC, pemanggilan operand dari alamat 940/941, eksekusi operasi penjumlahan (3 + 2 = 5), dan penyimpanan hasil ke memori.\nCatatan gambar: tiap panel menampilkan Memory (alamat 300: 1 9 4 0 ; 301: 5 9 4 1 ; 302: 2 9 4 1 ; dan 940: 0 0 0 3 ; 941: 0 0 0 2) serta CPU Registers (PC, AC, IR) yang berubah selama langkah-langkah eksekusi."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_11",
    "page_number": 12,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_11.jpg",
    "text": "Instruction Cycle State Diagram\nNodes dan label pada diagram:\n- Instruction fetch\n- Instruction address calculation\n- Instruction operation decoding\n- Operand fetch\n- Operand address calculation\n- Data Operation\n- Operand store\n- Multiple operands\n- Multiple results\n- Instruction complete, fetch next instruction\n- Return for string or vector data\nSlide: Arskom (12)\nDeskripsi singkat gambar: Diagram state dengan node bundar yang saling terhubung oleh panah menggambarkan alur siklus instruksi: Instruction fetch dan Instruction address calculation berinteraksi; instruksi didekode di Instruction operation decoding; operand dapat diambil melalui Operand fetch (dengan \"Multiple operands\") menuju Operand address calculation dan/atau Data Operation; hasil operasi (Data Operation) kembali ke Operand address calculation untuk penyimpanan atau pengulangan (untuk string/vektor: \"Return for string or vector data\"); hasil akhir disimpan melalui Operand store (dengan \"Multiple results\"); setelah instruksi lengkap, alur kembali untuk mengambil instruksi berikutnya (\"Instruction complete, fetch next instruction\")."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_12",
    "page_number": 13,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_12.jpg",
    "text": "Interrupts\n- Mechanism by which other modules (e.g. I/O) may interrupt normal sequence of processing\n- Program\n  - e.g. overflow, division by zero\n- Timer\n  - Generated by internal processor timer\n  - Used in pre-emptive multitasking\n- I/O\n  - from I/O controller\n- Hardware failure\n  - e.g. memory parity error\nArskom\nDeskripsi gambar: Slide berisi judul \"Interrupts\" dan daftar poin yang menjelaskan jenis-jenis interrupt serta contoh-contohnya; terdapat logo kecil di kiri bawah dan footer \"Arskom\" di tengah bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_13",
    "page_number": 14,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_13.jpg",
    "text": "Program Flow Control\nGambar memperlihatkan tiga skenario alur kontrol program: (a) No interrupts; (b) Interrupts: short I/O wait; (c) Interrupts: long I/O wait. Label pada diagram: User Program, I/O Program, WRITE, I/O Command, Interrupt Handler, END, dan penomoran langkah 1–5.\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_14",
    "page_number": 15,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_14.jpg",
    "text": "Interrupt Cycle\n● Added to instruction cycle\n● Processor checks for interrupt\n  ○ Indicated by an interrupt signal\n● If no interrupt, fetch next instruction\n● If interrupt pending:\n  ○ Suspend execution of current program\n  ○ Save context\n  ○ Set PC to start address of interrupt handler routine\n  ○ Process interrupt\n  ○ Restore context and continue interrupted program\n(Footer: Arskom di tengah bawah; nomor halaman 15 di kanan bawah)\nDeskripsi gambar: Slide berjudul \"Interrupt Cycle\" berisi daftar poin yang menjelaskan langkah-langkah siklus interrupt. Tidak ada diagram atau ilustrasi teknis—hanya teks berpoin. Terdapat logo kecil di kiri bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_15",
    "page_number": 16,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_15.jpg",
    "text": "Transfer of Control via Interrupts\nUser Program\n...\ni\ni+1\n...\nM\nInterrupt occurs here (lokasi interupsi: antara instruksi i dan i+1)\nInterrupt Handler\nArskom\nDeskripsi gambar (Indonesia): Diagram menunjukkan dua blok vertikal: di kiri 'User Program' dan di kanan 'Interrupt Handler'. Pada blok User Program terdapat penomoran vertikal 1, 2, ... sampai M dengan garis horizontal di posisi i dan i+1, dan titik-titik di antaranya yang mewakili instruksi/keadaan. Sebuah panah dari kanan blok User Program (tepat di antara i dan i+1) berlabel 'Interrupt occurs here' menunjuk ke bagian atas blok Interrupt Handler, dan sebuah panah kembali dari Interrupt Handler menuju blok User Program pada posisi setelah interupsi (kembali ke i+1). Panah menunjukkan kendali dipindahkan ke handler interupsi lalu dikembalikan ke program pengguna."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_16",
    "page_number": 17,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_16.jpg",
    "text": "Instruction Cycle with Interrupts\nSTART\nFetch Cycle: Fetch Next Instruction\nExecute Cycle: Execute Instruction\n- Interrupts Disabled -> kembali langsung ke Fetch Next Instruction\n- Interrupts Enabled -> ke Interrupt Cycle\nInterrupt Cycle: Check for Interrupt; Process Interrupt -> kembali ke Fetch Next Instruction\nHALT\nArskom\nDeskripsi gambar: Diagram alur siklus instruksi dengan interupsi. Mulai dari oval \"START\" menuju kotak \"Fetch Next Instruction\" (Fetch Cycle). Dari situ panah menuju kotak \"Execute Instruction\" (Execute Cycle). Dari kotak \"Execute Instruction\" ada panah ke bawah menuju oval \"HALT\". Dari kotak \"Execute Instruction\" juga ada panah ke kanan menuju kotak \"Check for Interrupt; Process Interrupt\" (Interrupt Cycle) dengan label panah \"Interrupts Enabled\". Dari kotak \"Check for Interrupt; Process Interrupt\" panah kembali ke kotak \"Fetch Next Instruction\". Selain itu ada panah yang kembali langsung dari bagian atas kotak \"Execute Instruction\" ke kotak \"Fetch Next Instruction\" yang diberi label \"Interrupts Disabled\"."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_17",
    "page_number": 18,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_17.jpg",
    "text": "Program Timing\nShort I/O Wait\nDiagram (a) Without interrupts:\nTime (panah ke bawah)\nUrutan: 1, 4, Processor wait (I/O operation), 5, 2, 4, Processor wait (I/O operation), 5, 3\nDiagram (b) With interrupts:\nTime (panah ke bawah)\nUrutan: 1, 4, 2a, 5, 2b, 4, 3a, 5, 3b\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_18",
    "page_number": 19,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_18.jpg",
    "text": "Program Timing\nLong I/O Wait\nDiagram (dengan label yang terlihat pada slide):\n- Time (sumbu waktu menunjuk ke bawah)\n- (a) Without interrupts: urutan lingkaran 1, 4, kotak \"Processor wait\" dengan panah \"I/O operation\", kemudian 5, 2, 4, kotak \"Processor wait\" dengan panah \"I/O operation\", lalu 5 dan 3.\n- (b) With interrupts: urutan lingkaran 1, 4, 2, kotak \"Processor wait\" dengan panah \"I/O operation\", kemudian 5, 4, 3, kotak \"Processor wait\" dengan panah \"I/O operation\", lalu 5.\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_19",
    "page_number": 20,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_19.jpg",
    "text": "Instruction Cycle (with Interrupts) - State Diagram\nIsi diagram (diterjemahkan & dirangkum):\n- Instruction fetch (Ambil instruksi)\n- Instruction address calculation (Perhitungan alamat instruksi)\n- Instruction operation decoding (Dekode operasi instruksi)\n- Operand fetch (Ambil operand)\n- Operand address calculation (Perhitungan alamat operand) — muncul sebelum dan setelah Data Operation\n- Data Operation (Operasi data)\n- Operand store (Simpan operand)\n- Interrupt check (Cek interupsi)\n- Interrupt (Interupsi)\nLabel panah: Multiple operands (Beberapa operand); Multiple results (Beberapa hasil); Instruction complete, fetch next instruction (Instruksi selesai, ambil instruksi berikutnya); Return for string or vector data (Kembali untuk data string atau vektor); No interrupt (Tidak ada interupsi).\nDeskripsi singkat gambar: Diagram status menunjukkan aliran eksekusi instruksi dari pengambilan instruksi melalui dekoding, perhitungan alamat, pengambilan operand, operasi data, penyimpanan hasil, hingga pengecekan interupsi dan penanganan interupsi; panah-panah menunjukkan kondisi seperti operand/hasil berganda, pengembalian untuk data string/vektor, dan cabang jika tidak ada interupsi."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_20",
    "page_number": 21,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_20.jpg",
    "text": "Multiple Interrupts\nDisable interrupts\n○ Processor will ignore further interrupts whilst processing one interrupt\n○ Interrupts remain pending and are checked after first interrupt has been processed\n○ Interrupts handled in sequence as they occur\nDefine priorities\n○ Low priority interrupts can be interrupted by higher priority interrupts\n○ When higher priority interrupt has been processed, processor returns to previous interrupt\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_21",
    "page_number": 22,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_21.jpg",
    "text": "Multiple Interrupts - Sequential\nUser Program\nInterrupt Handler X\nInterrupt Handler Y\nArskom\nDeskripsi diagram: Diagram menunjukkan User Program yang mengeksekusi instruksi secara berurutan (panah ke bawah). Dari titik eksekusi program terdapat garis putus-putus menuju Interrupt Handler X dan Interrupt Handler Y; garis tersebut menggambarkan perpindahan eksekusi ke handler yang bersangkutan dan kemudian kembali ke program pengguna, menggambarkan penanganan interrupt secara sequential."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_22",
    "page_number": 23,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_22.jpg",
    "text": "Multiple Interrupts – Nested\nUser Program\nInterrupt Handler X\nInterrupt Handler Y\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_23",
    "page_number": 24,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_23.jpg",
    "text": "Time Sequence of Multiple Interrupts\nLabel pada diagram:\n- Kolom: User Program, Printer ISR, Communication ISR, Disk ISR\n- Waktu dan panah yang ditampilkan:\n  - User Program: t = 0\n  - Dari User Program ke Printer ISR: t = 10\n  - Dari Printer ISR ke Communication ISR: t = 15\n  - Pada Communication ISR: beberapa panah bertanda t = 25 (termasuk panah kembali ke Printer ISR dan panah ke Disk ISR)\n  - Dari Communication ISR ke Disk ISR: t = 35\n  - Dari Printer ISR kembali ke User Program: t = 40\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_24",
    "page_number": 25,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_24.jpg",
    "text": "Connecting\n- All the units must be connected\n- Different type of connection for different type of unit\n  o Memory\n  o Input/Output\n  o CPU\nFooter: Arskom (tengah bawah); Page 25 (kanan bawah); logo bundar merah-hitam (kiri bawah)."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_25",
    "page_number": 26,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_25.jpg",
    "text": "Computer Modules\nDiagram 1 — Memori:\n- Label kiri: Baca (Read), Tulis (Write), Alamat (Address), Data\n- Blok: Memori (Memory) — N kata (indeks 0 ... N-1)\n- Label kanan: Data\nDiagram 2 — Modul I/O:\n- Label kiri: Baca (Read), Tulis (Write), Alamat (Address), Data internal (Internal Data), Data eksternal (External Data)\n- Blok: Modul I/O (I/O Module) — M port\n- Label kanan: Data internal (Internal Data), Data eksternal (External Data), Sinyal interupsi (Interrupt Signals)\nDiagram 3 — CPU:\n- Label kiri: Instruksi (Instructions), Data, Sinyal interupsi (Interrupt Signals)\n- Blok: CPU\n- Label kanan: Alamat (Address), Sinyal kontrol (Control Signals), Data\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_26",
    "page_number": 27,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_26.jpg",
    "text": "Memory Connection\n• Receives and sends data\n• Receives addresses (of locations)\n• Receives control signals\n  ○ Read\n  ○ Write\n  ○ Timing\nCatatan visual: Slide berjudul \"Memory Connection\" dengan footer \"Arskom\", logo di kiri bawah, dan nomor slide \"27\" di kanan bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_27",
    "page_number": 28,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_27.jpg",
    "text": "Input/Output Connection\n• Similar to memory from computer's viewpoint\n• Output\n  ○ Receive data from computer\n  ○ Send data to peripheral\n• Input\n  ○ Receive data from peripheral\n  ○ Send data to computer\nDeskripsi gambar: Slide berjudul \"Input/Output Connection\" yang berisi teks berpoin. Poin-poin utama: \"Similar to memory from computer's viewpoint\"; bagian \"Output\" dengan subpoin \"Receive data from computer\" dan \"Send data to peripheral\"; bagian \"Input\" dengan subpoin \"Receive data from peripheral\" dan \"Send data to computer\". Di pojok kiri bawah terdapat logo, di bagian bawah tengah tertulis \"Arskom\", dan di pojok kanan bawah nomor slide \"28\". Tidak ada gambar, diagram, atau ilustrasi lain."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_28",
    "page_number": 29,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_28.jpg",
    "text": "Input/Output Connection (2)\n• Receive control signals from computer\n• Send control signals to peripherals\n  ○ e.g. spin disk\n• Receive addresses from computer\n  ○ e.g. port number to identify peripheral\n• Send interrupt signals (control)\nDeskripsi gambar (dalam Bahasa Indonesia): Slide berisi judul \"Input/Output Connection (2)\" dan daftar poin utama tentang koneksi I/O: menerima sinyal kontrol dari komputer; mengirim sinyal kontrol ke periferal (mis. memutar disk); menerima alamat dari komputer (mis. nomor port untuk mengidentifikasi periferal); mengirim sinyal interupsi (kontrol). Di bagian bawah terdapat footer bertuliskan \"Arskom\", nomor slide \"29\", dan sebuah logo kecil di sudut kiri bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_29",
    "page_number": 30,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_29.jpg",
    "text": "CPU Connection\n● Reads instruction and data\n● Writes out data (after processing)\n● Sends control signals to other units\n● Receives (& acts on) interrupts\nArskom    30\nDeskripsi gambar: Slide berwarna latar putih dengan judul 'CPU Connection' di kiri atas. Di bawah judul terdapat daftar bullet berisi empat poin: 'Reads instruction and data', 'Writes out data (after processing)', 'Sends control signals to other units', dan 'Receives (& acts on) interrupts'. Di pojok kiri bawah terdapat sebuah logo bundar, di bagian tengah bawah tertulis 'Arskom', dan di pojok kanan bawah tertera nomor slide '30'."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_30",
    "page_number": 31,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_30.jpg",
    "text": "Buses\n• There are a number of possible interconnection systems\n• Single and multiple BUS structures are most common\n• e.g. Control/Address/Data bus (PC)\n• e.g. Unibus (DEC-PDP)\nFooter: 'Arskom' (tengah bawah); slide number '31' (kanan bawah).\nDeskripsi gambar/logo: Slide tanpa diagram teknis; terdapat logo bundar kecil di kiri bawah (area merah di atas, titik kuning di tengah, setengah lingkaran hitam bergaris di bawah)."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_31",
    "page_number": 32,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_31.jpg",
    "text": "What is a Bus?\n- A communication pathway connecting two or more devices\n- Usually broadcast\n- Often grouped\n  - A number of channels in one bus\n  - e.g. 32 bit data bus is 32 separate single bit channels\n- Power lines may not be shown\nFooter: Arskom\nSlide number: 32\nDeskripsi gambar (Indonesia): Slide berjudul \"What is a Bus?\" dengan daftar berpoin yang menjelaskan pengertian bus, contoh pengelompokan saluran, catatan tentang jalur daya yang mungkin tidak ditampilkan, logo kecil di pojok kiri bawah, footer \"Arskom\" di tengah bawah, dan nomor slide \"32\" di pojok kanan bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_32",
    "page_number": 33,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_32.jpg",
    "text": "Data Bus\n• Carries data\n  ○ Remember that there is no difference between \"data\" and \"instruction\" at this level\n• Width is a key determinant of performance\n  ○ 8, 16, 32, 64 bit\nFooter: \"Arskom\" dan nomor halaman \"33\"; terdapat logo bundar kecil di kiri bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_33",
    "page_number": 34,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_33.jpg",
    "text": "Address Bus\n- Identify the source or destination of data\n- e.g. CPU needs to read an instruction (data) from a given location in memory\n- Bus width determines maximum memory capacity of system\n  - e.g. 8080 has 16 bit address bus giving 64k address space\nArskom\nDeskripsi gambar: Slide berjudul \"Address Bus\" yang menampilkan beberapa poin peluru. Poin-poin tersebut: Identify the source or destination of data; contoh: CPU needs to read an instruction (data) from a given location in memory; Bus width determines maximum memory capacity of system; contoh: 8080 has 16 bit address bus giving 64k address space. Di bagian bawah terdapat footer \"Arskom\", nomor slide 34, dan sebuah logo kecil di kiri bawah."
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_34",
    "page_number": 35,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_34.jpg",
    "text": "Control Bus\n• Control and timing information\n  ○ Memory read/write signal\n  ○ Interrupt request\n  ○ Clock signals\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_35",
    "page_number": 36,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_35.jpg",
    "text": "Bus Interconnection Scheme\nCPU\nMemory\n...\nMemory\nI/O\n...\nI/O\nControl Lines\nAddress Lines\nData Lines\nBus\nArskom"
  },
  {
    "doc_id": "arsikom3_final_9c95a005",
    "slide_id": "arsikom3_final_9c95a005_36",
    "page_number": 37,
    "gcs_url": "https://storage.googleapis.com/qdrant-hackathon/logif/docs/images/arsikom3_final_9c95a005_36.jpg",
    "text": "Reference\nStallings William, Computer Organization and Architecture 7th Edition.\nStallings William, Computer Organization and Architecture 11th Edition.\nRandal E. Bryant, Computer System: A Programmer’s Perspective.\nDeskripsi gambar: Slide berisi judul \"Reference\" di kiri atas, tiga entri referensi seperti tercantum di atas, dan nomor slide \"37\" di pojok kanan bawah."
  }
]